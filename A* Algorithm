import heapq
class Node:
 def __init__(self, row, col, cost, parent=None):
 self.row = row
 self.col = col
 self.cost = cost
 self.parent = parent
 def __lt__(self, other):
 return self.cost < other.cost
def heuristic(node, goal):
 # Example: Manhattan distance heuristic
 return abs(node.row - goal.row) + abs(node.col -
goal.col)
def astar(grid, start, goal):
 rows, cols = len(grid), len(grid[0])
 visited = set()
 pq = []
 heapq.heappush(pq, start)
 while pq:
 current = heapq.heappop(pq)
 if (current.row, current.col) == (goal.row,
goal.col):
 path = []
 while current:
 path.append((current.row, current.col))
 current = current.parent
 return path[::-1]
 visited.add((current.row, current.col))
 neighbors = [
 (current.row - 1, current.col),
 (current.row + 1, current.col),
 (current.row, current.col - 1),
 (current.row, current.col + 1)
]
 for neighbor_row, neighbor_col in neighbors:
 if 0 <= neighbor_row < rows and 0 <=
neighbor_col < cols and grid[neighbor_row][neighbor_col] ==
0 and (neighbor_row, neighbor_col) not in visited:
 neighbor = Node(neighbor_row, neighbor_col,
current.cost + 1, current)
 neighbor_cost = neighbor.cost +
heuristic(neighbor, goal)
 heapq.heappush(pq, neighbor)
 return None
# Example usage
grid = [
 [0, 0, 0, 0, 0],
 [0, 1, 0, 1, 0],
 [0, 1, 0, 1, 0],
 [0, 0, 0, 0, 0],
]
start = Node(0, 0, 0)
goal = Node(3, 4, 0)
path = astar(grid, start, goal)
print("A* Path:", path)
